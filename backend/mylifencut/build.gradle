plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'java'
    id 'org.sonarqube' version '3.4.0.2513'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    finalizedBy('jacocoTestReport')
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html {
            enabled true
            destination file('build/reports/jacocoReport.html')
        }
        csv {
            enabled false
        }
        xml {
            enabled true
            destination file('build/reports/jacocoReport.xml')
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/MylifencutApplication*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/*dto/**',
                            '**/common/**',
                            '**/*Exception*',
                            '**/*Constant*',
                            '**/*Filter*'
                    ])
        }))
    }
    finalizedBy('jacocoTestCoverageVerification')
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            includes = ['com.ssafy.mylifencut.*']

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 250
            }
            excludes = ['**.MylifencutApplication',
                        '**.*Request*',
                        '**.*Response*',
                        '**.*Dto*',
                        '**.common*',
                        '**.*Constant*',
                        '**.*Exception*',
                        '**.*Filter*']
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://k7b105.p.ssafy.io:8000/"
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property 'sonar.projectVersion', '1.1.0-SNAPSHOT'
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "Sonar way"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", "**/resources/static/**, **/test/**, **/MylifencutApplication*, **/*Request*, **/*Response*, **/dto/**, **/*Constant*, **/*Filter*, **/*Exception*, **/common/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacocoReport.xml"
    }
}